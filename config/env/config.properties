#  This file contaians app related queries, dbConfig and details 
[app]
appName = car-rental
port = 3000
jwtSecretKey = mykey
jwtExpiryTime = 3h

[email]
email = avinashreddytummuri77@gmail.com
password = bddtpkvzjbugtyek

# [db]
# pgsql.dialect = postgres
# pgsql.host = pg-car-rental-db-avinashreddytummuri77-c061.g.aivencloud.com
# pgsql.port = 27960
# pgsql.username = avnadmin
# pgsql.password = HYDSCTAVNS_G4zma8CW7M-yfewYZoX
# pgsql.database = defaultdb

[db]
mysql.dialect = mysql
mysql.host = mysql-car-rental-avinashreddytummuri77-c061.i.aivencloud.com
mysql.port = 27960
mysql.username = avnadmin
mysql.password = HYDSCTAVNS_Tuxz1_4rGm_wrbjj3gB
mysql.database = car_rental


[query]
#otp
insert_otp = INSERT INTO car_rental.otp_requests (user_id, otp_code, otp_type) VALUES (:user_id, :otp_code, :otp_type)
get_otp = SELECT otp_id, user_id, otp_code, otp_type, is_verified, created_at, expires_at, CASE WHEN NOW() > expires_at THEN TRUE ELSE FALSE END AS is_expired FROM car_rental.otp_requests WHERE user_id = :user_id AND otp_type = :otp_type ORDER BY created_at DESC LIMIT 1;
update_otp = UPDATE car_rental.otp_requests SET is_verified = TRUE WHERE user_id = :user_id AND otp_code = :otp_code AND otp_type = :otp_type;
#user
get_userbyemail = select  user_id, first_name, last_name, email, password, phone_number, last_login,driving_license_verified, aadhar_verified from car_rental.users where email = :email OR phone_number = :phone_number;
get_userby_id = SELECT user_id, first_name, last_name, email, phone_number,dob, gender, driving_license_verified, aadhar_verified, profile_image, image_type, address, aadhar_number, aadhar_image, aadhar_img_type, driving_license_number, driving_license_image, driving_license_img_type FROM car_rental.users WHERE user_id = :user_id
post_newuser= INSERT INTO car_rental.users (first_name, last_name, email, gender, password, phone_number, active,driving_license_verified, dob) VALUES (:first_name, :last_name, :email, :gender, :password, :phone_number, 'Y', 'N',:dob);
update_user = UPDATE car_rental.users SET first_name = :first_name, last_name = :last_name, email = :email, gender = :gender, address = :address, dob= :dob WHERE user_id = :user_id;
change_user_password = UPDATE car_rental.users SET password = :password Where user_id = :user_id
update_last_login = UPDATE car_rental.users SET last_login = CURRENT_TIMESTAMP WHERE user_id = :user_id
update_user_image = UPDATE car_rental.users SET profile_image = :profile_image, image_type = :image_type WHERE user_id = :user_id;
update_user_aadhar = UPDATE car_rental.users SET aadhar_number = :aadhar_number, aadhar_image = :aadhar_image, aadhar_img_type = :aadhar_img_type, aadhar_verified = 'N' WHERE user_id = :user_id;
update_user_driving_license = UPDATE car_rental.users SET driving_license_number = :driving_license_number, driving_license_image = :driving_license_image, driving_license_img_type = :driving_license_img_type, driving_license_verified = 'N' WHERE user_id = :user_id;


#admin
get_adminbyemail = select  admin_id, name, email, password, phone_number from car_rental.admins where email = :email OR phone_number = :phone_number;
get_adminby_id = select  admin_id, name, email, phone_number from car_rental.admins where admin_id = :admin_id;
post_newadmin= INSERT INTO car_rental.admins (name, email, password, phone_number, active) VALUES (:name, :email, :password, :phone_number, 'Y');
update_admin = UPDATE car_rental.admins SET name = :name, email = :email Where admin_id = :admin_id
change_admin_password = UPDATE car_rental.admins SET password = :password Where admin_id = :admin_id

#cars
get_random_cars = SELECT c.car_id, c.name, c.brand, c.model_year, c.daily_rent, c.location, c.description, c.car_condition, c.mileage, c.car_type, c.seater, c.fastag_availability, c.location_address, c.image, c.image_ext FROM car_rental.cars c LEFT JOIN car_rental.bookings b ON c.car_id = b.car_id AND b.booking_status IN ('confirmed', 'pending') AND ( (CURDATE() BETWEEN b.start_date AND b.end_date) OR (b.start_date >= CURDATE()) ) WHERE b.car_id IS NULL AND c.availability = 'Y' AND c.location = :location ORDER BY RAND() LIMIT 5;
get_cars =SELECT c.car_id, c.name, c.brand, c.model_year, c.daily_rent, c.location, c.description, c.car_condition, c.mileage, c.car_type, c.seater, c.fastag_availability, c.location_address, c.image, c.image_ext FROM car_rental.cars c WHERE c.location = :location AND c.availability = 'Y' AND NOT EXISTS ( SELECT 1 FROM car_rental.bookings b WHERE b.car_id = c.car_id AND b.booking_status IN ('CONFIRMED') AND ( ( (b.start_date < :start_date OR (b.start_date = :start_date AND b.start_time <= :start_time)) AND (b.end_date > :end_date OR (b.end_date = :end_date AND b.end_time >= :end_time)) ) ) );
get_car_by_id = SELECT car_id, name, brand, model_year, daily_rent, availability, registration_number, location, description, CASE WHEN (SELECT COUNT(*) FROM car_rental.bookings b WHERE b.car_id = c.car_id AND b.booking_status NOT IN('COMPLETED')) > 0 THEN 'Y' ELSE 'N' END AS is_booked, image, image_ext FROM car_rental.cars c WHERE c.car_id = :car_id;
get_car_by_number = SELECT car_id, name, brand, model_year, daily_rent, availability, registration_number, location, description, CASE WHEN (SELECT COUNT(*) FROM car_rental.bookings b WHERE b.car_id = c.car_id AND b.booking_status NOT IN('COMPLETED')) > 0 THEN 'Y' ELSE 'N' END AS is_booked, image, image_ext FROM car_rental.cars c WHERE c.registration_number = :registration_number
add_car = INSERT INTO car_rental.cars(name, brand, model_year, daily_rent, availability, registration_number, image, image_ext, location, description, car_owner, car_condition, mileage, car_type, seater, fastag_availability, location_address) VALUES ( :name, :brand, :model_year, :daily_rent, :availability, :registration_number, :image, :image_ext, :location, :description, :car_owner, :car_condition, :mileage, :car_type, :seater, :fastag_availability, :location_address);
update_car = UPDATE car_rental.cars SET name = :name, brand = :brand, model_year = :model_year, daily_rent = :daily_rent, availability = :availability, registration_number = :registration_number, location = :location, description = :description, updated_by = :updated_by, updated_at = CURRENT_DATE WHERE car_id =  :car_id
update_car_avilability = UPDATE car_rental.cars SET availability = :availability, updated_by = :updated_by, updated_at = CURRENT_DATE WHERE car_id =  :car_id
update_car_image = UPDATE car_rental.cars SET image = :image, image_ext = :image_ext, updated_by = :updated_by, updated_at = CURRENT_DATE WHERE car_id =  :car_id

//booking 
get_booking = SELECT b.booking_id, b.user_id, u.first_name AS user_name, u.email AS user_email, u.phone_number AS user_phone_number, b.car_id, c.name AS car_name, c.brand, c.model_year, c.daily_rent, c.location AS car_location, c.image, c.image_ext, b.start_date, b.end_date, b.total_price, b.booking_status, b.payment_mode FROM car_rental.bookings b JOIN car_rental.cars c ON b.car_id = c.car_id LEFT JOIN car_rental.users u ON b.user_id = u.user_id WHERE (COALESCE(:booking_id, NULL) IS NULL OR b.booking_id = :booking_id) AND (COALESCE(:email, NULL) IS NULL OR LOWER(u.email) LIKE CONCAT('%', LOWER(:email), '%')) AND (COALESCE(:phone_number, NULL) IS NULL OR u.phone_number = :phone_number) AND (COALESCE(:car_id, NULL) IS NULL OR b.car_id = :car_id) AND (COALESCE(:booking_status, NULL) IS NULL OR b.booking_status = :booking_status) AND (COALESCE(:user_id, NULL) IS NULL OR b.user_id = :user_id)
add_booking = INSERT INTO car_rental.bookings ( user_id, car_id, start_date, start_time, end_date, end_time, total_price, booking_status, payment_mode) VALUES ( :user_id, :car_id, :start_date, :start_time, :end_date, :end_time, :total_price, :booking_status, :payment_mode);
update_booking = UPDATE car_rental.bookings SET booking_status = :booking_status,transaction_id = :transaction_id, updated_at = CURRENT_DATE, updated_by = :updated_by WHERE booking_id = :booking_id
get_booking_conflict = SELECT CASE WHEN EXISTS ( SELECT 1 FROM bookings b WHERE b.car_id = :car_id AND b.booking_status IN ('confirmed', 'pending') AND ( (:start_date BETWEEN b.start_date AND b.end_date) OR (:end_date BETWEEN b.start_date AND b.end_date) OR (b.start_date BETWEEN :start_date AND :end_date) OR (b.end_date BETWEEN :start_date AND :end_date) ) AND ( (:start_time BETWEEN b.start_time AND b.end_time) OR (:end_time BETWEEN b.start_time AND b.end_time) OR (b.start_time BETWEEN :start_time AND :end_time) OR (b.end_time BETWEEN :start_time AND :end_time) ) ) THEN true ELSE false END AS availability_status;
get_avilable_slots = WITH RECURSIVE date_series AS ( SELECT DATE(:start_date) AS booking_date UNION ALL SELECT DATE_ADD(booking_date, INTERVAL 1 DAY) FROM date_series WHERE booking_date < :end_date ), booked_slots AS ( SELECT start_date, end_date, TIME_FORMAT(start_time, '%H:%i') AS start_time, TIME_FORMAT(end_time, '%H:%i') AS end_time FROM car_rental.bookings WHERE car_id = :car_id AND booking_status IN ('confirmed', 'pending') ) SELECT DATE_FORMAT(ds.booking_date, '%Y-%m-%d') AS available_date, t.time_slot FROM date_series ds CROSS JOIN ( SELECT '10:00' AS time_slot UNION ALL SELECT '11:00' UNION ALL SELECT '12:00' UNION ALL SELECT '13:00' UNION ALL SELECT '14:00' UNION ALL SELECT '15:00' UNION ALL SELECT '16:00' UNION ALL SELECT '17:00' UNION ALL SELECT '18:00' UNION ALL SELECT '19:00' UNION ALL SELECT '20:00' UNION ALL SELECT '21:00' UNION ALL SELECT '22:00' ) t WHERE NOT EXISTS ( SELECT 1 FROM booked_slots bs WHERE (ds.booking_date > bs.start_date AND ds.booking_date < bs.end_date) OR (ds.booking_date = bs.start_date AND t.time_slot >= bs.start_time) OR (ds.booking_date = bs.end_date AND t.time_slot <= bs.end_time) )  AND (ds.booking_date > :start_date OR t.time_slot >= :start_time) ORDER BY available_date, time_slot;
get_avilable_slots_by_start_date = WITH RECURSIVE date_series AS ( SELECT DATE(:start_date) AS booking_date, 1 AS day_count UNION ALL SELECT DATE_ADD(booking_date, INTERVAL 1 DAY), day_count + 1 FROM date_series WHERE day_count < 30 ), time_slots AS ( SELECT '10:00' AS time_slot UNION ALL SELECT '11:00' UNION ALL SELECT '12:00' UNION ALL SELECT '13:00' UNION ALL SELECT '14:00' UNION ALL SELECT '15:00' UNION ALL SELECT '16:00' UNION ALL SELECT '17:00' UNION ALL SELECT '18:00' UNION ALL SELECT '19:00' UNION ALL SELECT '20:00' UNION ALL SELECT '21:00' UNION ALL SELECT '22:00' ), booked_slots AS ( SELECT start_date, end_date, TIME_FORMAT(start_time, '%H:%i') AS start_time, TIME_FORMAT(end_time, '%H:%i') AS end_time FROM car_rental.bookings WHERE car_id = :car_id AND booking_status IN ('confirmed', 'pending') ), available_slots AS ( SELECT ds.booking_date, t.time_slot, ROW_NUMBER() OVER (ORDER BY ds.booking_date, t.time_slot) AS slot_order FROM date_series ds CROSS JOIN time_slots t WHERE NOT EXISTS ( SELECT 1 FROM booked_slots bs WHERE (ds.booking_date > bs.start_date AND ds.booking_date < bs.end_date) OR (ds.booking_date = bs.start_date AND t.time_slot >= bs.start_time) OR (ds.booking_date = bs.end_date AND t.time_slot <= bs.end_time) ) AND (ds.booking_date > :start_date OR (ds.booking_date = :start_date AND t.time_slot >= :start_time)) ) SELECT DATE_FORMAT(booking_date, '%Y-%m-%d') AS available_date, time_slot FROM available_slots WHERE slot_order <= ( SELECT COALESCE(MIN(slot_order), 999999) FROM available_slots WHERE EXISTS ( SELECT 1 FROM booked_slots bs WHERE (available_slots.booking_date > bs.start_date AND available_slots.booking_date < bs.end_date) OR (available_slots.booking_date = bs.start_date AND available_slots.time_slot >= bs.start_time) OR (available_slots.booking_date = bs.end_date AND available_slots.time_slot <= bs.end_time) ) ) ORDER BY available_date, time_slot;





