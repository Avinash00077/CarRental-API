#  This file contaians app related queries, dbConfig and details 
[app]
appName = car-rental
port = 3000
jwtSecretKey = avst67$8779@78
jwtExpiryTime = 24h
adminJwtSecretKey = s$av8779@78t67
adminJwtExpiryTime = 24h

[email]
email = dndcarrentals@gmail.com
password = lmpvlidvsrrnuvbt

[db]
mysql.dialect = mysql
mysql.host = mysql-car-rental-avinashreddytummuri77-c061.i.aivencloud.com
mysql.port = 27960
mysql.username = avnadmin
mysql.password = HYDSCTAVNS_Tuxz1_4rGm_wrbjj3gB
mysql.database = car_rental

[cloud]
cloud_name = dzuiigkhd
api_key = 488822311765679
api_secret = h8jnaLcNa628X4DjeDLuAv_WQAI

[query]
#otp
insert_otp = INSERT INTO car_rental.otp_requests (user_id, otp_code, otp_type, booking_id) VALUES (:user_id, :otp_code, :otp_type, :booking_id)
get_otp = SELECT otp_id, booking_id, user_id, otp_code, otp_type, is_verified, created_at, expires_at, CASE WHEN NOW() > expires_at THEN TRUE ELSE FALSE END AS is_expired FROM car_rental.otp_requests WHERE user_id = :user_id AND otp_type = :otp_type AND (booking_id IS NULL OR booking_id = :booking_id)  ORDER BY created_at DESC LIMIT 1;
update_otp = UPDATE car_rental.otp_requests SET is_verified = TRUE WHERE user_id = :user_id AND otp_code = :otp_code AND otp_type = :otp_type;
update_booking_otp = UPDATE car_rental.otp_requests SET is_verified = TRUE WHERE booking_id = :booking_id AND otp_code = :otp_code AND otp_type = :otp_type;

#user
get_user_name = SELECT user_name, user_id, email, first_name, last_name FROM car_rental.users WHERE email = :email AND dob = :dob
get_user_by_user_name = select user_name, user_id, first_name, last_name, email, password, phone_number, last_login,driving_license_verified, profile_img_url, aadhar_verified, driving_license_expiry from car_rental.users where user_name = :user_name;
get_userbyemail = select user_name, user_id, first_name, last_name, email, password, phone_number, last_login,driving_license_verified, profile_img_url, aadhar_verified, driving_license_expiry from car_rental.users where email = :email OR phone_number = :phone_number;
get_userby_id = SELECT user_id, user_name,first_name, last_name,email, phone_number, address, active, last_login, gender, dob, profile_img_url, cover_img_url, aadhar_number, aadhar_img_url, aadhar_verified, driving_license_number, driving_license_expiry, driving_license_img_url, driving_license_verified  FROM car_rental.users WHERE user_id = :user_id;
post_newuser= INSERT INTO car_rental.users (user_name,first_name, last_name, email, gender, password, phone_number, active,driving_license_verified,aadhar_verified, dob) VALUES (:user_name,:first_name, :last_name, :email, :gender, :password, :phone_number, 'Y', 'N','N',:dob);
update_user = UPDATE car_rental.users SET first_name = :first_name, last_name = :last_name, email = :email, gender = :gender, address = :address, dob= :dob WHERE user_id = :user_id;
change_user_password = UPDATE car_rental.users SET password = :password Where user_id = :user_id
update_last_login = UPDATE car_rental.users SET last_login = CURRENT_TIMESTAMP WHERE user_id = :user_id
update_user_image = UPDATE car_rental.users SET profile_img_url = :profile_img_url WHERE user_id = :user_id;
update_user_cover_image = UPDATE car_rental.users SET cover_img_url = :cover_img_url WHERE user_id = :user_id;
update_user_aadhar = UPDATE car_rental.users SET aadhar_number = :aadhar_number, aadhar_img_url = :aadhar_img_url, aadhar_verified = 'P' WHERE user_id = :user_id;
update_user_driving_license = UPDATE car_rental.users SET driving_license_number = :driving_license_number, driving_license_expiry = :driving_license_expiry, driving_license_img_url = :driving_license_img_url, driving_license_verified = 'P' WHERE user_id = :user_id;
get_users_for_verification = SELECT user_id, first_name, last_name, email, aadhar_img_url, aadhar_number, aadhar_verified, driving_license_img_url, driving_license_number, driving_license_expiry, driving_license_verified FROM car_rental.users WHERE (driving_license_img_url IS NOT NULL AND aadhar_verified != 'Y') or (aadhar_img_url IS NOT NULL AND driving_license_verified != 'Y')
update_user_verfication = UPDATE car_rental.users set driving_license_verified = :driving_license_verified, aadhar_verified = :aadhar_verified, comments = :comments WHERE user_id = :user_id

#admin
get_admins = SELECT admin_id, name, email, phone_number, active, user_type, location  FROM car_rental.admins
get_adminbyemail = select  admin_id, name, email, password, phone_number, user_type, location from car_rental.admins where email = :email OR phone_number = :phone_number;
get_adminby_id = select  admin_id, name, email, phone_number, user_type, location from car_rental.admins where admin_id = :admin_id;
post_newadmin= INSERT INTO car_rental.admins (name, email, password, phone_number, active, user_type, location) VALUES (:name, :email, :password, :phone_number, 'Y', :user_type, :location);
update_admin = UPDATE car_rental.admins SET name = :name, email = :email, phone_number = :phone_number, active = :active, user_type = :user_type, location = :location Where admin_id = :admin_id
change_admin_password = UPDATE car_rental.admins SET password = :password Where admin_id = :admin_id

#cars
get_all_cars = SELECT `cars`.`car_id`, `cars`.`name`, `cars`.`brand`, `cars`.`model_year`, `cars`.`daily_rent`, `cars`.`availability`, `cars`.`registration_number`, `cars`.`location`, `cars`.`description`, `cars`.`car_owner`, `cars`.`car_condition`, `cars`.`mileage`, `cars`.`car_type`, `cars`.`seater`, `cars`.`fastag_availability`, `cars`.`location_address`, `cars`.`car_cover_img_url` FROM `car_rental`.`cars` WHERE location = :location is null or location = :location
get_random_cars = SELECT c.car_id, c.name, c.brand, c.model_year, c.daily_rent, c.location, c.description, c.car_condition, c.mileage, c.car_type, c.seater, c.fastag_availability, c.location_address, c.car_cover_img_url FROM car_rental.cars c LEFT JOIN car_rental.bookings b ON c.car_id = b.car_id AND b.booking_status IN ('confirmed', 'pending') AND ( (CURDATE() BETWEEN b.start_date AND b.end_date) OR (b.start_date >= CURDATE()) ) WHERE b.car_id IS NULL AND c.availability = 'Y' AND c.location = :location ORDER BY RAND() LIMIT 5;
get_cars_zz = WITH RECURSIVE date_series AS ( SELECT DATE(:start_date) AS booking_date UNION ALL SELECT DATE_ADD(booking_date, INTERVAL 1 DAY) FROM date_series WHERE booking_date < DATE(:end_date) ), booked_slots AS ( SELECT car_id, start_date, end_date, TIME_FORMAT(start_time, '%H:%i') AS start_time, TIME_FORMAT(end_time, '%H:%i') AS end_time FROM car_rental.bookings WHERE booking_status = 'CONFIRMED' ), available_dates AS ( SELECT c.car_id, ds.booking_date, JSON_ARRAYAGG(t.time_slot) AS time_slots FROM car_rental.cars c CROSS JOIN date_series ds CROSS JOIN ( SELECT '10:00' AS time_slot UNION ALL SELECT '11:00' UNION ALL SELECT '12:00' UNION ALL SELECT '13:00' UNION ALL SELECT '14:00' UNION ALL SELECT '15:00' UNION ALL SELECT '16:00' UNION ALL SELECT '17:00' UNION ALL SELECT '18:00' UNION ALL SELECT '19:00' UNION ALL SELECT '20:00' UNION ALL SELECT '21:00' UNION ALL SELECT '22:00' ) t WHERE NOT EXISTS ( SELECT 1 FROM booked_slots bs WHERE bs.car_id = c.car_id AND ( (ds.booking_date > bs.start_date AND ds.booking_date < bs.end_date) OR (ds.booking_date = bs.start_date AND t.time_slot >= bs.start_time) OR (ds.booking_date = bs.end_date AND t.time_slot <= bs.end_time) ) ) GROUP BY c.car_id, ds.booking_date ) SELECT c.car_id, c.name, c.brand, c.model_year, c.daily_rent, c.location, c.description, c.car_condition, c.mileage, c.car_type, c.seater, c.fastag_availability, c.location_address, c.car_cover_img_url, (SELECT COUNT(*) FROM car_rental.bookings cb WHERE ride_status = 'COMPLETED' AND  cb.car_id = c.car_id) AS total_completed_rides,(SELECT ROUND(AVG(r.rating), 2) FROM car_rental.reviews r JOIN car_rental.bookings b ON r.booking_id = b.booking_id AND r.user_id = b.user_id WHERE b.car_id = c.car_id) AS average_car_rating, ( SELECT JSON_ARRAYAGG( JSON_OBJECT( 'available_date', ad.booking_date, 'time_slots', ad.time_slots ) ) FROM available_dates ad WHERE ad.car_id = c.car_id ) AS available_slots, ( SELECT JSON_ARRAYAGG( JSON_OBJECT( 'rating', r.rating, 'comment', r.comment, 'created_at', DATE_FORMAT(r.created_at, '%d-%m-%Y %H:%i:%s'), 'user_name', u.user_name, 'profile_img_url', u.profile_img_url ) ) FROM car_rental.reviews r LEFT JOIN car_rental.bookings b ON r.booking_id = b.booking_id LEFT JOIN car_rental.users u ON b.user_id = u.user_id WHERE b.car_id = c.car_id ) AS car_reviews FROM car_rental.cars c WHERE c.location = :location AND c.availability = 'Y' AND NOT EXISTS ( SELECT 1 FROM car_rental.bookings b WHERE b.car_id = c.car_id AND b.booking_status = 'CONFIRMED' AND ( ( (b.start_date < :start_date OR (b.start_date = :start_date AND b.start_time <= :start_time)) AND (b.end_date > :end_date OR (b.end_date = :end_date AND b.end_time >= :end_time)) ) ) );
get_cars = SELECT cars.car_id, cars.name, cars.brand, cars.model_year, cars.daily_rent, cars.availability, cars.registration_number, cars.location, cars.description, cars.car_owner, cars.car_condition, cars.mileage, cars.car_type, cars.seater, cars.fastag_availability, cars.location_address, cars.car_cover_img_url, ( SELECT COUNT(*) FROM car_rental.bookings cb WHERE cb.ride_status = 'COMPLETED' AND cb.car_id = cars.car_id ) AS total_completed_rides, ( SELECT COALESCE(SUM(cb.totalKm), 0) FROM car_rental.bookings cb WHERE cb.ride_status = 'COMPLETED' AND cb.car_id = cars.car_id ) AS total_km_travelled, ( SELECT ROUND(AVG(r.rating), 2) FROM car_rental.reviews r JOIN car_rental.bookings b ON r.booking_id = b.booking_id WHERE b.car_id = cars.car_id ) AS average_car_rating, ( SELECT JSON_ARRAYAGG( JSON_OBJECT( 'rating', r.rating, 'comment', r.comment, 'created_at', DATE_FORMAT(r.created_at, '%d-%m-%Y %H:%i:%s'), 'user_name', u.user_name, 'profile_img_url', u.profile_img_url ) ) FROM car_rental.reviews r LEFT JOIN car_rental.bookings b ON r.booking_id = b.booking_id LEFT JOIN car_rental.users u ON b.user_id = u.user_id WHERE b.car_id = cars.car_id ) AS car_reviews FROM car_rental.cars WHERE (cars.location = :location OR :location IS NULL) AND cars.car_id NOT IN ( SELECT DISTINCT bookings.car_id FROM car_rental.bookings WHERE bookings.booking_status IN ('CONFIRMED', 'PENDING') AND (:start_date < bookings.end_date AND :end_date > bookings.start_date) )
get_car_by_id = WITH RECURSIVE date_series AS ( SELECT DATE(:start_date) AS booking_date UNION ALL SELECT DATE_ADD(booking_date, INTERVAL 1 DAY) FROM date_series WHERE booking_date < DATE(:end_date) ), booked_slots AS ( SELECT car_id, start_date, end_date, TIME_FORMAT(start_time, '%H:%i') AS start_time, TIME_FORMAT(end_time, '%H:%i') AS end_time FROM car_rental.bookings WHERE booking_status = 'CONFIRMED' ), available_dates AS ( SELECT c.car_id, ds.booking_date, JSON_ARRAYAGG(t.time_slot) AS time_slots FROM car_rental.cars c CROSS JOIN date_series ds CROSS JOIN ( SELECT '10:00' AS time_slot UNION ALL SELECT '11:00' UNION ALL SELECT '12:00' UNION ALL SELECT '13:00' UNION ALL SELECT '14:00' UNION ALL SELECT '15:00' UNION ALL SELECT '16:00' UNION ALL SELECT '17:00' UNION ALL SELECT '18:00' UNION ALL SELECT '19:00' UNION ALL SELECT '20:00' UNION ALL SELECT '21:00' UNION ALL SELECT '22:00' ) t WHERE NOT EXISTS ( SELECT 1 FROM booked_slots bs WHERE bs.car_id = c.car_id AND ( (ds.booking_date > bs.start_date AND ds.booking_date < bs.end_date) OR (ds.booking_date = bs.start_date AND t.time_slot >= bs.start_time) OR (ds.booking_date = bs.end_date AND t.time_slot <= bs.end_time) ) ) GROUP BY c.car_id, ds.booking_date ) SELECT c.car_id, c.name, c.brand, c.model_year, c.daily_rent, c.location, c.description, c.car_condition, c.mileage, c.car_type, c.seater, c.fastag_availability, c.location_address, c.car_cover_img_url, ( SELECT JSON_ARRAYAGG( JSON_OBJECT( 'available_date', ad.booking_date, 'time_slots', ad.time_slots ) ) FROM available_dates ad WHERE ad.car_id = c.car_id ) AS available_slots, ( SELECT JSON_ARRAYAGG( JSON_OBJECT( 'rating', r.rating, 'comment', r.comment, 'created_at', DATE_FORMAT(r.created_at, '%d-%m-%Y %H:%i:%s'), 'user_name', u.user_name, 'profile_img_url', u.profile_img_url ) ) FROM car_rental.reviews r LEFT JOIN car_rental.bookings b ON r.booking_id = b.booking_id LEFT JOIN car_rental.users u ON b.user_id = u.user_id  WHERE b.car_id = c.car_id ) AS car_reviews, l.longitude, l.latitude FROM car_rental.cars c LEFT JOIN car_rental.locations l on l.location = c.location  WHERE c.car_id = :car_id AND c.availability = 'Y' AND NOT EXISTS ( SELECT 1 FROM car_rental.bookings b WHERE b.car_id = c.car_id AND b.booking_status = 'CONFIRMED' AND ( ( (b.start_date < :start_date OR (b.start_date = :start_date AND b.start_time <= :start_time)) AND (b.end_date > :end_date OR (b.end_date = :end_date AND b.end_time >= :end_time)) ) ) );
get_car_by_number = SELECT car_id, name, brand, model_year, daily_rent, availability, registration_number, location, description, CASE WHEN (SELECT COUNT(*) FROM car_rental.bookings b WHERE b.car_id = c.car_id AND b.booking_status NOT IN('COMPLETED')) > 0 THEN 'Y' ELSE 'N' END AS is_booked, car_cover_img_url FROM car_rental.cars c WHERE c.registration_number = :registration_number
add_car = INSERT INTO car_rental.cars(name, brand, model_year, daily_rent, availability, registration_number, car_cover_img_url, location, description, car_owner, car_condition, mileage, car_type, seater, fastag_availability, location_address) VALUES ( :name, :brand, :model_year, :daily_rent, :availability, :registration_number, :car_cover_img_url, :location, :description, :car_owner, :car_condition, :mileage, :car_type, :seater, :fastag_availability, :location_address);
update_car = UPDATE car_rental.cars SET name = :name, brand = :brand, model_year = :model_year, daily_rent = :daily_rent, availability = :availability, registration_number = :registration_number, location = :location, description = :description WHERE car_id =  :car_id
update_car_avilability = UPDATE car_rental.cars SET availability = :availability WHERE car_id =  :car_id
update_car_image = UPDATE car_rental.cars SET car_cover_img_url = :car_cover_img_url WHERE car_id =  :car_id

#booking 
get_current_bookings = SELECT b.booking_id ,b.user_id,b.ride_status, b.transaction_id ,CONCAT(u.first_name, ' ', u.last_name) as name ,u.email AS user_email ,u.phone_number AS user_phone_number ,b.car_id ,c.name AS car_name ,c.brand ,c.model_year ,c.daily_rent ,c.location AS car_location ,c.car_cover_img_url ,b.start_date ,b.start_time ,b.end_date ,b.end_time ,b.total_price ,CASE WHEN b.start_date < current_date() AND b.ride_status = 'NOT_STARTED'  then 'EXPIRED' else b.booking_status end as booking_status ,b.payment_mode, b.ride_status, r.rating, r.comment, r.review_id, l.latitude, l.longitude FROM car_rental.bookings b JOIN car_rental.cars c ON b.car_id = c.car_id LEFT JOIN car_rental.users u ON b.user_id = u.user_id LEFT JOIN car_rental.reviews r ON r.booking_id = b.booking_id LEFT JOIN car_rental.locations l on l.location = c.location  WHERE (COALESCE(:location, NULL) IS NULL OR c.location = :location ) AND b.booking_status = 'CONFIRMED' 
get_booking = SELECT b.booking_id ,b.user_id,b.ride_status,  b.transaction_id  ,CONCAT(u.first_name, ' ', u.last_name) as name ,u.email AS user_email ,u.phone_number AS user_phone_number ,b.car_id ,c.name AS car_name ,c.brand ,c.model_year ,c.daily_rent ,c.location AS car_location ,c.car_cover_img_url ,b.start_date ,b.start_time ,b.end_date ,b.end_time ,b.total_price ,CASE WHEN b.start_date < current_date() AND b.ride_status = 'NOT_STARTED'  then 'EXPIRED' else b.booking_status end as booking_status,b.payment_mode, b.ride_status, r.rating, r.comment, r.review_id, l.latitude, l.longitude FROM car_rental.bookings b JOIN car_rental.cars c ON b.car_id = c.car_id LEFT JOIN car_rental.users u ON b.user_id = u.user_id LEFT JOIN car_rental.reviews r ON r.booking_id = b.booking_id LEFT JOIN car_rental.locations l on l.location = c.location  WHERE ( COALESCE(:booking_id, NULL) IS NULL OR b.booking_id = :booking_id ) AND ( COALESCE(:email, NULL) IS NULL OR LOWER(u.email) LIKE CONCAT ( '%' ,LOWER(:email) ,'%' ) ) AND ( COALESCE(:phone_number, NULL) IS NULL OR u.phone_number = :phone_number ) AND ( COALESCE(:car_id, NULL) IS NULL OR b.car_id = :car_id ) AND ( COALESCE(:booking_status, NULL) IS NULL OR b.booking_status = :booking_status ) AND ( COALESCE(:user_id, NULL) IS NULL OR b.user_id = :user_id ) order by booking_id desc
get_user_bookings = SELECT b.booking_id, b.user_id, b.transaction_id, CONCAT(u.first_name, ' ', u.last_name) AS name, u.email AS user_email, u.phone_number AS user_phone_number, b.car_id, c.name AS car_name, c.brand, c.model_year, c.daily_rent, c.location AS car_location, c.car_cover_img_url, b.start_date, b.start_time, b.end_date, b.end_time, b.total_price, b.booking_status, b.payment_mode, b.ride_status, b.created_at, b.pickup_date_time, b.drop_date_time, b.startKm, b.endKm, b.totalKm, r.rating, r.comment, r.review_id, l.latitude, l.longitude FROM car_rental.bookings b JOIN car_rental.cars c ON b.car_id = c.car_id LEFT JOIN car_rental.users u ON b.user_id = u.user_id LEFT JOIN car_rental.reviews r ON r.booking_id = b.booking_id LEFT JOIN car_rental.locations l ON l.location_id = c.location WHERE (:user_id IS NULL OR b.user_id = :user_id) AND ( (:bookingStatus = 'true' AND b.booking_status NOT IN ('FAILURE', 'EXPIRED','CANCELLED') AND ( (:type = 'past' AND b.end_date < CURRENT_DATE()) OR (:type = 'current' AND b.start_date <= CURRENT_DATE() AND b.end_date >= CURRENT_DATE()) OR (:type = 'future' AND b.start_date > CURRENT_DATE()) ) ) OR (:bookingStatus = 'false' AND b.booking_status IN ('FAILURE', 'EXPIRED','CANCELLED')) ) ORDER BY b.start_date DESC;
get_bookings_admin = SELECT b.booking_id, b.user_id, b.ride_status, b.transaction_id, CONCAT(u.first_name, ' ', u.last_name) AS name, u.email AS user_email, u.phone_number AS user_phone_number, b.car_id, c.name AS car_name, c.brand, c.model_year, c.daily_rent, c.location AS car_location, c.car_cover_img_url, b.start_date, b.start_time, b.end_date, b.end_time, b.total_price, b.booking_status, CASE WHEN b.booking_status = 'ON_GOING' AND b.end_date < CURRENT_DATE() THEN 'Y' ELSE 'N' END AS isDelayed, b.payment_mode, b.created_at, b.pickup_date_time, b.drop_date_time, b.startKm, b.endKm, b.totalKm, r.rating, r.comment, r.review_id, l.latitude, l.longitude, ( SELECT JSON_ARRAYAGG( JSON_OBJECT( 'car_image_front', bd.car_image_front, 'car_image_back', bd.car_image_back, 'car_image_side_1', bd.car_image_side_1, 'car_image_side_2', bd.car_image_side_2 ) ) FROM car_rental.booking_details bd WHERE bd.booking_id = b.booking_id AND bd.is_before_after = 'B' ) AS beforeImages, ( SELECT JSON_ARRAYAGG( JSON_OBJECT( 'car_image_front', bd.car_image_front, 'car_image_back', bd.car_image_back, 'car_image_side_1', bd.car_image_side_1, 'car_image_side_2', bd.car_image_side_2 ) ) FROM car_rental.booking_details bd WHERE bd.booking_id = b.booking_id AND bd.is_before_after = 'A' ) AS afterImages FROM car_rental.bookings b JOIN car_rental.cars c ON b.car_id = c.car_id LEFT JOIN car_rental.users u ON b.user_id = u.user_id LEFT JOIN car_rental.reviews r ON r.booking_id = b.booking_id LEFT JOIN car_rental.locations l ON l.location = c.location WHERE (:location IS NULL OR c.location = :location) AND b.booking_status NOT IN ('FAILURE', 'EXPIRED', 'CANCELLED') AND ( (:type = 'past' AND b.end_date < CURRENT_DATE() AND b.ride_status = 'COMPLETED') OR (:type = 'ongoing' AND b.ride_status = 'ON_GOING') OR (:type = 'future' AND b.start_date > CURRENT_DATE()) ) ORDER BY b.booking_id DESC;
add_booking = INSERT INTO car_rental.bookings ( user_id, car_id, start_date, start_time, end_date, end_time, total_price, booking_status, payment_mode, created_at) VALUES ( :user_id, :car_id, :start_date, :start_time, :end_date, :end_time, :total_price, :booking_status, :payment_mode, now());
update_booking = UPDATE car_rental.bookings SET booking_status = :booking_status,transaction_id = :transaction_id, ride_status = 'NOT_STARTED' WHERE booking_id = :booking_id
cancel_booking = UPDATE car_rental.bookings SET booking_status = 'CANCELLED', ride_status = 'CANCELLED' WHERE booking_id = :booking_id
get_booking_conflict = SELECT CASE WHEN EXISTS ( SELECT 1 FROM bookings b WHERE b.car_id = :car_id AND b.booking_status IN ('confirmed', 'pending') AND ( (:start_date BETWEEN b.start_date AND b.end_date) OR (:end_date BETWEEN b.start_date AND b.end_date) OR (b.start_date BETWEEN :start_date AND :end_date) OR (b.end_date BETWEEN :start_date AND :end_date) ) AND ( (:start_time BETWEEN b.start_time AND b.end_time) OR (:end_time BETWEEN b.start_time AND b.end_time) OR (b.start_time BETWEEN :start_time AND :end_time) OR (b.end_time BETWEEN :start_time AND :end_time) ) ) THEN true ELSE false END AS availability_status;
get_avilable_slots = WITH RECURSIVE date_series AS ( SELECT DATE(:start_date) AS booking_date UNION ALL SELECT DATE_ADD(booking_date, INTERVAL 1 DAY) FROM date_series WHERE booking_date < :end_date ), booked_slots AS ( SELECT start_date, end_date, TIME_FORMAT(start_time, '%H:%i') AS start_time, TIME_FORMAT(end_time, '%H:%i') AS end_time FROM car_rental.bookings WHERE car_id = :car_id AND booking_status IN ('confirmed', 'pending') ) SELECT DATE_FORMAT(ds.booking_date, '%Y-%m-%d') AS available_date, t.time_slot FROM date_series ds CROSS JOIN ( SELECT '10:00' AS time_slot UNION ALL SELECT '11:00' UNION ALL SELECT '12:00' UNION ALL SELECT '13:00' UNION ALL SELECT '14:00' UNION ALL SELECT '15:00' UNION ALL SELECT '16:00' UNION ALL SELECT '17:00' UNION ALL SELECT '18:00' UNION ALL SELECT '19:00' UNION ALL SELECT '20:00' UNION ALL SELECT '21:00' UNION ALL SELECT '22:00' ) t WHERE NOT EXISTS ( SELECT 1 FROM booked_slots bs WHERE (ds.booking_date > bs.start_date AND ds.booking_date < bs.end_date) OR (ds.booking_date = bs.start_date AND t.time_slot >= bs.start_time) OR (ds.booking_date = bs.end_date AND t.time_slot <= bs.end_time) )  AND (ds.booking_date > :start_date OR t.time_slot >= :start_time) ORDER BY available_date, time_slot;
get_avilable_slots_by_start_date = WITH RECURSIVE date_series AS ( SELECT DATE(:start_date) AS booking_date, 1 AS day_count UNION ALL SELECT DATE_ADD(booking_date, INTERVAL 1 DAY), day_count + 1 FROM date_series WHERE day_count < 30 ), time_slots AS ( SELECT '10:00' AS time_slot UNION ALL SELECT '11:00' UNION ALL SELECT '12:00' UNION ALL SELECT '13:00' UNION ALL SELECT '14:00' UNION ALL SELECT '15:00' UNION ALL SELECT '16:00' UNION ALL SELECT '17:00' UNION ALL SELECT '18:00' UNION ALL SELECT '19:00' UNION ALL SELECT '20:00' UNION ALL SELECT '21:00' UNION ALL SELECT '22:00' ), booked_slots AS ( SELECT start_date, end_date, TIME_FORMAT(start_time, '%H:%i') AS start_time, TIME_FORMAT(end_time, '%H:%i') AS end_time FROM car_rental.bookings WHERE car_id = :car_id AND booking_status IN ('CONFIRMED') ), available_slots AS ( SELECT ds.booking_date, t.time_slot, ROW_NUMBER() OVER (ORDER BY ds.booking_date, t.time_slot) AS slot_order FROM date_series ds CROSS JOIN time_slots t WHERE NOT EXISTS ( SELECT 1 FROM booked_slots bs WHERE ( ds.booking_date >= bs.start_date AND ds.booking_date <= bs.end_date ) OR ( ds.booking_date = bs.start_date AND t.time_slot >= bs.start_time ) OR ( ds.booking_date = bs.end_date AND t.time_slot <= bs.end_time ) ) AND (ds.booking_date > :start_date OR (ds.booking_date = :start_date AND t.time_slot > :start_time)) AND ( ( SELECT COUNT(*) FROM booked_slots WHERE start_date > :start_date ) = 0 OR ds.booking_date < (SELECT MIN(start_date) FROM booked_slots WHERE start_date > :start_date) ) ) SELECT DATE_FORMAT(booking_date, '%Y-%m-%d') AS available_date, time_slot FROM available_slots WHERE NOT EXISTS ( SELECT 1 FROM booked_slots bs WHERE :start_date >= bs.start_date AND :start_date <= bs.end_date ) ORDER BY available_date, time_slot;
update_booking_status_pickup = UPDATE car_rental.bookings SET booking_status = :booking_status, pickup_date_time = NOW() WHERE booking_id = :booking_id
update_booking_status_drop = UPDATE car_rental.bookings SET booking_status = :booking_status, drop_date_time = NOW() WHERE booking_id = :booking_id
post_review = INSERT INTO car_rental.reviews (user_id, booking_id, rating, comment) VALUES (:userId, :bookingId, :rating, :comment);
update_review = UPDATE car_rental.reviews SET rating = :rating, comment = :comment WHERE user_id = :userId AND booking_id = :bookingId;
get_review = SELECT user_id, booking_id, rating, comment FROM car_rental.reviews  WHERE user_id = :userId AND booking_id = :bookingId; 
update_booking_pickup = UPDATE car_rental.bookings SET pickup_date_time = now(), startKm = :startKm, ride_status = 'ON_GOING' WHERE booking_id = :booking_id;
update_booking_drop = UPDATE car_rental.bookings SET drop_date_time = now(),endKm = :endKm, totalKm = :endKm - startKm, booking_status = 'COMPLETED', ride_status = 'COMPLETED' WHERE booking_id = :booking_id;
update_booking_images = INSERT INTO car_rental.booking_details (booking_id, car_image_front, car_image_back, car_image_side_1, car_image_side_2, is_before_after) VALUES (:bookingId, :frontImg, :backImg, :side1Img, :side2Img, :isBeforeAfter)
get_booking_images = SELECT booking_details_id, car_image_front, car_image_back, car_image_side_1, car_image_side_2, is_before_after FROM car_rental.booking_details WHERE booking_id = :booking_id;
post_booking_images = INSERT INTO booking_details (booking_id, car_image_front, car_image_back, car_image_side_1, car_image_side_2, is_before_after, extraImge) VALUES (:booking_id, :car_image_front, :car_image_back, :car_image_side_1, :car_image_side_2, :is_before_after, :extraImge)

#utilitiys
get_locations = SELECT `locations`.`location_id`, `locations`.`location`, `locations`.`address`, `locations`.`activeInd`, `locations`.`latitude`, `locations`.`longitude`  FROM `car_rental`.`locations`;
post_locations = INSERT INTO locations (location, address, activeInd, latitude, longitude) VALUES (:location, :address, :activeInd, :latitude, :longitude)
update_locations = UPDATE locations SET location = :location, address = :address, activeInd = :activeInd, latitude = :latitude, longitude = :longitude WHERE location_id = :location_id
get_car_brands = SELECT `car_brands`.`car_id`, `car_brands`.`car_brand`, `car_brands`.`car_name`, `car_brands`.`car_type`, `car_brands`.`seater`, `car_brands`.`car_modal_year`, `car_brands`.`activeInd` FROM `car_rental`.`car_brands`;
post_feedback = INSERT INTO car_rental.feedbacks (user_id, rating, comments) VALUES (:user_id, :rating, :comments)
update_feedback = UPDATE car_rental.feedbacks SET rating = :rating, comments = :comments WHERE user_id = :user_id
get_feedbacks = SELECT f.feedback_id, f.user_id, f.rating, f.comments, u.user_name, u.profile_img_url, u.first_name, u.last_name from car_rental.feedbacks f LEFT JOIN car_rental.users u ON f.user_id = u.user_id
post_car_brands = INSERT INTO car_brands (car_brand, car_name, car_type, seater, car_modal_year, activeInd) VALUES (:car_brand, :car_name, :car_type, :seater, :car_modal_year, 'Y')
update_car_brands = UPDATE car_brands SET car_brand = :car_brand, car_name = :car_name, car_type = :car_type, seater = :seater, car_modal_year = :car_modal_year, activeInd = :activeInd WHERE car_id = :car_id
