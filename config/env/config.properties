#  This file contaians app related queries, dbConfig and details 
[app]
appName = car-rental
port = 3000
jwtSecretKey = mykey
jwtExpiryTime = 3h

[db]
pgsql.dialect = postgres
pgsql.host = pg-car-rental-db-avinashreddytummuri77-c061.g.aivencloud.com
pgsql.port = 27960
pgsql.username = avnadmin
pgsql.password = HYDSCTAVNS_G4zma8CW7M-yfewYZoX
pgsql.database = defaultdb

[query]
#otp
insert_otp = INSERT INTO car_rental.otp_requests (user_id, otp_code, otp_type) VALUES (:user_id, :otp_code, :otp_type)
get_otp = SELECT otp_id, user_id, otp_code, otp_type, is_verified, created_at, expires_at, CASE WHEN NOW() > expires_at THEN TRUE ELSE FALSE END AS is_expired FROM car_rental.otp_requests WHERE user_id = :user_id AND otp_type = :otp_type ORDER BY created_at DESC LIMIT 1;
update_otp = UPDATE car_rental.otp_requests SET is_verified = TRUE WHERE user_id = :user_id AND otp_code = :otp_code AND otp_type = :otp_type;
#user
get_userbyemail = select  user_id, name, email, password, phone_number from car_rental.users where email = :email OR phone_number = :phone_number;
get_userby_id = select  user_id, name, email, phone_number from car_rental.users where user_id = :user_id;
post_newuser= INSERT INTO car_rental.users (name, email, password, phone_number, active, created_at, created_by) VALUES (:name, :email, :password, :phone_number, 'Y', CURRENT_DATE, :created_by);
update_user = UPDATE car_rental.users SET name = :name, email = :email Where user_id = :user_id
change_user_password = UPDATE car_rental.users SET password = :password Where user_id = :user_id


#admin
get_adminbyemail = select  admin_id, name, email, password, phone_number from car_rental.admins where email = :email OR phone_number = :phone_number;
get_adminby_id = select  admin_id, name, email, phone_number from car_rental.admins where admin_id = :admin_id;
post_newadmin= INSERT INTO car_rental.admins (name, email, password, phone_number, active, created_at, created_by) VALUES (:name, :email, :password, :phone_number, 'Y', CURRENT_DATE, :created_by);
update_admin = UPDATE car_rental.admins SET name = :name, email = :email Where admin_id = :admin_id
change_admin_password = UPDATE car_rental.admins SET password = :password Where admin_id = :admin_id

#cars
get_cars = SELECT c.car_id, c.name, c.brand, c.model_year, c.daily_rent, c.availability, c.registration_number, c.location, c.description, c.image, c.image_ext, COALESCE( ( SELECT JSON_AGG( JSON_BUILD_OBJECT( 'review_id', r.review_id, 'user_id', r.user_id, 'user_name', u.name, 'rating', r.rating, 'comment', r.comment, 'created_at', r.created_at::DATE ) ) FROM car_rental.reviews r LEFT JOIN car_rental.users u ON r.user_id = u.user_id WHERE r.car_id = c.car_id ), '[]' ) AS reviews, CASE WHEN b.car_id IS NULL THEN :from_date::DATE ELSE ( SELECT MIN((b.end_date + INTERVAL '1 day')::DATE) FROM car_rental.bookings b WHERE b.car_id = c.car_id AND b.booking_status IN ('CONFIRMED', 'ONGOING', 'PENDING') AND b.end_date >= :from_date ) END AS available_from FROM car_rental.cars c LEFT JOIN car_rental.bookings b ON c.car_id = b.car_id AND b.booking_status IN ('CONFIRMED', 'ONGOING', 'PENDING') AND ( (:from_date IS NOT NULL AND :to_date IS NOT NULL) AND ( (b.start_date <= :to_date AND b.end_date >= :from_date) ) ) WHERE (:location IS NULL OR c.location = :location) GROUP BY c.car_id, b.car_id;
get_car_by_id = SELECT car_id, name, brand, model_year, daily_rent, availability, registration_number, location, description, CASE WHEN (SELECT COUNT(*) FROM car_rental.bookings b WHERE b.car_id = c.car_id AND b.booking_status NOT IN('COMPLETED')) > 0 THEN 'Y' ELSE 'N' END AS is_booked, image, image_ext FROM car_rental.cars c WHERE c.car_id = :car_id;
get_car_by_number = SELECT car_id, name, brand, model_year, daily_rent, availability, registration_number, location, description, CASE WHEN (SELECT COUNT(*) FROM car_rental.bookings b WHERE b.car_id = c.car_id AND b.booking_status NOT IN('COMPLETED')) > 0 THEN 'Y' ELSE 'N' END AS is_booked, image, image_ext FROM car_rental.cars c WHERE c.registration_number = :registration_number
add_car = INSERT INTO car_rental.cars( name, brand, model_year, daily_rent, availability, registration_number, created_by, created_at, image, image_ext, location, description) VALUES (:name, :brand, :model_year, :daily_rent,:availability, :registration_number, :created_by, CURRENT_DATE, :image, :image_ext, :location, :description);
update_car = UPDATE car_rental.cars SET name = :name, brand = :brand, model_year = :model_year, daily_rent = :daily_rent, availability = :availability, registration_number = :registration_number, location = :location, description = :description, updated_by = :updated_by, updated_at = CURRENT_DATE WHERE car_id =  :car_id
update_car_avilability = UPDATE car_rental.cars SET availability = :availability, updated_by = :updated_by, updated_at = CURRENT_DATE WHERE car_id =  :car_id
update_car_image = UPDATE car_rental.cars SET image = :image, image_ext = :image_ext, updated_by = :updated_by, updated_at = CURRENT_DATE WHERE car_id =  :car_id

//booking 
get_booking = SELECT b.booking_id, b.user_id, u.name AS user_name, u.email AS user_email, u.phone_number AS user_phone_number, b.car_id, c.name AS car_name, c.brand, c.model_year, c.daily_rent, c.location AS car_location, c.image, c.image_ext, b.start_date, b.end_date, b.total_price, b.booking_status, b.payment_mode, b.created_at AS booking_created_at, b.created_by, b.updated_at AS booking_updated_at, b.updated_by FROM car_rental.bookings b JOIN car_rental.cars c ON b.car_id = c.car_id LEFT JOIN car_rental.users u ON b.user_id = u.user_id WHERE (:booking_id IS NULL OR b.booking_id = :booking_id) AND (:email IS NULL OR u.email ILIKE '%' || :email || '%') AND (:phone_number IS NULL OR u.phone_number = :phone_number) AND (:car_id IS NULL OR b.car_id = :car_id) AND (:booking_status IS NULL OR b.booking_status = :booking_status) AND (:user_id IS NULL OR  b.user_id = :user_id);
add_booking = INSERT INTO car_rental.bookings ( user_id, car_id, start_date, end_date, total_price, booking_status, payment_mode, created_at, created_by ) VALUES ( :user_id, :car_id, :start_date, :end_date, :total_price, :booking_status, :payment_mode, CURRENT_DATE, :created_by )
update_booking = UPDATE car_rental.bookings SET start_date = :start_date, end_date = :end_date, total_price = :total_price, booking_status = :booking_status, payment_mode = :payment_mode, updated_at = CURRENT_DATE, updated_by = :updated_by WHERE booking_id = :booking_id
get_booking_conflict = SELECT COUNT(*) > 0 AS is_conflict FROM car_rental.bookings b WHERE b.car_id = :car_id AND b.booking_status IN ('CONFIRMED', 'ONGOING', 'PENDING') AND ( (b.start_date < :to_date AND b.end_date > :from_date) ) AND(:booking_id IS NULL OR b.booking_id != :booking_id);